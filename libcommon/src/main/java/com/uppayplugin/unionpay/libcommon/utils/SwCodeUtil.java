package com.uppayplugin.unionpay.libcommon.utils;



/**
 *
 *<B>�汾ע��</B>
 *==========================================================================
 *    Ver      Date               Author           Comment                    ReleseDate
 *--------------------------------------------------------------------------
 *    1.0.1   2016-3-15       nicolas         ����������ļӽ���
 *    													 ���ܣ�����λ�ټ���
 *==========================================================================
 *</PRE>
 * @author nicolas
 * @version 1.0.1
 */
public class SwCodeUtil {

	//
	private static final int[][] BASIC = {
			{1,7,9,4,5,2,8,2,9,7,2,6,1,2,6,3,0,0},
			{0,6,9,6,7,1,0,1,1,3,9,3,5,7,4,2,0,0},
			{7,6,4,1,3,1,7,9,5,2,5,3,6,7,7,0,0,0},
			{3,9,3,1,5,2,5,7,9,2,6,1,3,7,7,6,0,0},
			{1,0,5,9,0,2,0,2,1,8,1,7,6,8,1,6,0,0},
			{1,7,4,4,7,9,9,0,7,9,8,4,0,7,5,2,0,0},
			{0,2,4,8,4,7,7,7,7,6,9,7,7,5,6,6,0,0},
			{1,9,1,8,4,7,0,2,5,5,7,6,5,1,9,6,0,0},
			{5,3,9,1,1,7,9,2,5,5,4,8,8,6,2,8,0,0},
			{5,6,0,2,8,8,7,6,5,1,4,3,5,6,0,5,0,0},
			{3,3,8,9,6,8,6,0,0,9,6,7,6,0,6,0,0,0},
			{7,3,9,2,8,4,3,6,1,6,2,6,1,8,1,4,0,0},
			{8,1,4,5,6,3,4,8,3,5,8,9,4,7,7,2,0,0},
			{9,1,6,3,2,5,2,2,7,3,7,6,4,5,9,3,0,0},
			{6,4,6,1,0,7,6,1,8,0,0,2,8,1,5,7,0,0},
			{7,9,1,4,3,9,4,7,7,2,4,5,7,3,4,5,0,0},
			{1,1,4,8,1,2,5,1,4,1,1,7,7,8,6,2,0,0},
			{1,5,6,3,9,7,8,3,8,6,7,8,5,8,3,5,0,0},
			{7,7,0,5,5,7,3,5,0,5,0,5,6,3,9,6,0,0},
			{5,2,4,9,3,5,8,2,0,4,7,4,7,9,0,6,0,0},
			{1,4,0,4,1,7,6,4,6,9,5,2,0,2,1,9,0,0},
			{1,7,1,9,0,9,3,7,4,5,8,4,1,2,1,0,0,0},
			{2,1,4,0,5,4,3,0,1,9,3,3,6,4,8,9,0,0},
			{6,8,4,5,7,3,5,6,2,0,0,3,4,2,1,7,0,0},
			{4,5,6,6,8,4,0,3,3,6,8,7,5,4,0,0,0,0},
			{0,3,8,4,7,5,2,3,5,5,7,5,0,6,9,2,0,0},
			{2,7,7,8,1,0,0,9,9,3,0,2,4,9,9,2,0,0},
			{4,9,7,3,5,9,3,6,1,5,8,0,8,5,1,9,0,0},
			{9,0,1,7,5,7,2,0,9,2,5,7,4,2,0,6,0,0},
			{6,8,2,8,2,2,7,8,8,7,9,5,4,5,3,2,0,0},
			{1,1,7,6,4,1,9,1,8,6,9,1,0,7,4,3,0,0},
			{9,9,0,4,1,0,8,3,2,2,0,3,9,1,4,5,0,0},
			{1,3,8,4,9,3,4,1,8,9,2,8,5,3,5,4,0,0},
			{7,5,5,2,3,3,8,1,1,9,5,7,9,7,6,8,0,0},
			{5,6,0,9,1,4,6,6,5,8,3,1,8,0,5,2,0,0},
			{5,2,7,3,1,3,8,5,1,3,7,2,5,4,9,8,0,0},
			{7,7,4,8,7,6,1,1,7,9,3,5,6,6,6,6,0,0},
			{0,5,5,1,8,2,2,9,0,4,1,6,1,5,6,4,0,0},
			{7,5,0,4,4,2,1,7,6,6,5,0,8,5,1,5,0,0},
			{8,6,8,9,2,9,6,9,6,9,2,0,6,6,4,8,0,0},
			{8,0,5,7,3,0,0,5,0,8,9,1,8,8,3,8,0,0},
			{8,5,8,6,4,0,1,2,1,7,2,5,5,8,5,2,0,0},
			{0,1,4,4,3,7,1,3,1,9,9,5,3,7,4,9,0,0},
			{9,6,3,2,2,7,4,6,5,3,5,1,5,0,9,0,0,0},
			{8,0,3,7,1,8,1,3,9,2,5,3,1,7,3,4,0,0},
			{1,7,0,8,5,6,5,1,2,6,6,4,1,0,2,6,0,0},
			{6,1,6,9,2,8,9,1,5,7,8,5,5,1,2,4,0,0},
			{4,3,8,6,7,3,8,2,4,2,8,5,6,2,1,5,0,0},
			{4,4,0,1,9,7,0,6,7,6,7,6,7,8,9,7,0,0},
			{7,0,3,3,5,1,3,3,7,0,6,0,3,0,3,4,0,0},
			{5,1,2,8,7,0,1,8,8,6,3,9,4,5,9,7,0,0},
			{1,5,0,0,3,8,1,0,9,1,4,1,6,0,2,1,0,0},
			{7,3,4,1,1,7,9,5,6,7,3,4,9,8,0,1,0,0},
			{6,7,8,4,9,2,5,4,9,0,8,8,4,9,1,5,0,0},
			{5,0,3,6,6,2,3,2,0,2,9,6,9,8,3,5,0,0},
			{8,9,9,8,8,7,1,7,7,4,3,3,5,9,0,9,0,0},
			{5,3,5,1,6,3,4,3,2,5,3,0,3,7,0,7,0,0},
			{5,4,4,8,5,9,4,3,6,2,2,2,8,8,3,2,0,0},
			{3,5,9,9,6,4,5,4,5,7,5,2,6,5,5,8,0,0},
			{6,2,1,1,3,7,6,3,3,4,1,3,3,8,5,2,0,0},
			{7,9,8,2,4,2,8,2,2,1,8,9,5,9,7,0,0,0},
			{5,6,4,8,9,8,7,6,4,1,6,0,9,2,0,7,0,0},
			{0,6,8,2,3,7,2,1,7,9,3,2,9,7,7,9,0,0},
			{5,9,3,9,4,6,6,3,5,2,0,9,8,8,3,1,0,0},
			{0,4,1,9,3,6,7,3,9,8,7,3,5,4,7,2,0,0},
			{0,6,6,8,7,5,1,1,2,8,4,8,3,8,4,9,0,0},
			{0,8,2,6,5,6,3,5,3,5,4,7,8,3,1,3,0,0},
			{7,2,3,2,0,9,7,1,8,2,4,5,4,2,3,7,0,0},
			{7,3,0,0,8,0,9,3,9,5,6,9,1,1,4,4,0,0},
			{6,9,7,1,3,7,6,0,2,4,1,3,8,8,1,1,0,0},
			{7,0,1,0,7,2,3,7,7,1,2,8,2,9,0,2,0,0},
			{5,6,3,3,1,3,6,3,5,7,4,2,2,2,2,2,0,0},
			{6,2,4,0,8,8,2,1,7,4,1,6,0,7,8,7,0,0},
			{4,8,5,6,4,4,4,0,0,2,3,4,5,0,7,2,0,0},
			{4,5,2,5,3,3,5,0,9,2,2,1,5,6,0,9,0,0},
			{5,6,9,1,3,8,7,7,7,4,2,0,2,3,9,5,0,0},
			{1,6,1,4,9,2,8,4,4,8,7,2,4,8,2,0,0,0},
			{6,1,7,9,2,9,1,2,6,6,4,3,2,1,6,8,0,0},
			{7,4,5,5,3,2,9,7,7,6,4,7,7,1,7,7,0,0},
			{7,9,1,9,4,4,4,9,7,0,8,5,2,8,8,9,0,0},
			{2,4,9,3,5,0,2,8,6,0,0,4,5,3,3,6,0,0},
			{6,3,9,1,1,6,5,5,3,9,2,5,3,5,7,2,0,0},
			{6,3,2,7,9,8,8,5,6,2,0,3,8,0,5,3,0,0},
			{5,4,8,8,4,3,8,0,1,0,1,8,0,2,4,4,0,0},
			{7,2,0,9,2,1,0,9,6,9,8,6,3,7,2,3,0,0},
			{0,5,2,9,8,4,4,8,5,6,8,5,3,0,4,7,0,0},
			{7,7,0,4,7,5,2,0,8,2,8,3,6,2,4,8,0,0},
			{5,5,6,2,6,5,1,6,8,8,3,9,9,0,7,3,0,0},
			{4,7,0,7,3,6,6,8,9,2,3,2,6,5,9,0,0,0},
			{8,5,9,4,0,9,7,2,2,8,8,2,4,6,7,8,0,0},
			{3,9,1,8,6,1,8,3,7,2,8,1,8,8,1,8,0,0},
			{2,0,7,8,8,8,3,9,3,5,8,0,5,6,5,7,0,0},
			{6,7,4,8,5,6,9,5,0,3,2,2,7,9,9,4,0,0},
			{3,8,7,7,8,5,5,3,1,0,2,6,6,1,7,0,0,0},
			{4,3,1,8,4,7,0,3,6,2,5,1,4,3,4,6,0,0},
			{8,1,4,9,2,5,6,8,2,2,8,5,6,9,9,3,0,0},
			{1,2,2,8,6,4,9,1,9,3,7,8,5,0,0,9,0,0},
			{8,3,4,2,9,0,1,5,1,8,7,2,5,0,4,1,0,0},
			{4,8,6,1,9,1,6,4,5,3,5,1,8,0,5,3,0,0},
			{7,1,9,0,6,0,6,8,4,7,1,8,4,2,1,0,0,0},
			};



	public SwCodeUtil() {
		super();
		// TODO Autogenerated constructor stub
	}

	/**
	 * @function : ���ڼ��ܺ�����ݽ��л�ԭ��λλ��
	 * @author :Administrator
	 * @create : 2016-3-15
	 * @param resultNumber	���ܺ�ȥ����λ�������
	 * @param bDataCheck �㷨����-ָ�����㷨��
	 * @param cursor �㷨�����±�
	 * @return
	 */
	public static int add(int resultNumber, int[] bDataCheck, int cursor) throws Exception
	{
		return (resultNumber<=bDataCheck[cursor])?(resultNumber+10):resultNumber;
	}

	/**
	 * @function : ������λ
	 * @author :Administrator
	 * @create : 2016-3-21
	 * @param data	ԭʼ����
	 * @param shiftNum  0-4 ���ơ�5-9����
	 * @param algorithm 0-���� 1-����
	 * @return
	 * @throws Exception
	 */
	public static byte[] shift(String data, int shiftNum, int algorithm) throws Exception
	{
		byte[] srcData = data.getBytes();
		byte[] dstData = new byte[18];
		System.arraycopy(srcData, 15, dstData, 15, 3);

		algorithm = algorithm>0?9-shiftNum:shiftNum;

		if(algorithm<5){//����
			for (int i = 0; i < 15; i++) {
				dstData[(i-shiftNum<0?i-shiftNum+15:i-shiftNum)] = srcData[i];
			}
		}else {				//����
			for (int i = 0; i < 15; i++) {
				dstData[(i+shiftNum>14?i+shiftNum-15:i+shiftNum)] = srcData[i];
			}
		}
		return new String(dstData).getBytes();
	}

	/**
	 * @function : ���ݼ���
	 * @author :Administrator
	 * @create : 2016-3-15
	 * @param data ����������
	 * @param intFlag �㷨�����±�
	 * @return
	 */
	public static String encryptData(String data, int algorithmFlag) throws Exception
	{
		byte[] bData = shift(data, Integer.valueOf((char)data.getBytes()[15]+""), 0);
		StringBuilder result = new StringBuilder();
		int[] bDataCheck = BASIC[algorithmFlag];

		for (int i = 0; i < bData.length; i++) {
			result.append((Integer.valueOf((char)bData[i]+"")+bDataCheck[i])%10);
		}
		return result.toString();
	}

	/**
	 * @function : ���ݽ���
	 * @author :Administrator
	 * @create : 2016-3-15
	 * @param data	����������
	 * @param intFlag �㷨�����±�
	 * @return
	 */
	public static String decryptData(String data, int algorithmFlag) throws Exception
	{
		byte[] bData = data.getBytes();
		int[] bDataCheck = BASIC[algorithmFlag];
		StringBuilder result = new StringBuilder();

		for (int i = 0; i < bData.length; i++) {
			result.append((add(Integer.valueOf((char)bData[i]+""), bDataCheck, i)-bDataCheck[i])%10);
		}

		byte[] strdata = shift(result.toString(), Integer.valueOf((char)result.toString().getBytes()[15]+""), 1);

		return new String(strdata);
	}


	public static void main(String[] args) throws Exception{
		String str = "123456789012345600";

		System.out.println("ԭʼ��"+str);
		for (int flag = 0; flag < 1;flag++) {

			String strenc = encryptData(str, flag);
			System.out.println("���ܣ�"+strenc);
			String strdec = decryptData(strenc, flag);
			System.out.println("���ܣ�"+strdec);
			if(!str.equals(strdec) ) System.out.println("wrong");
		}

	}


}
